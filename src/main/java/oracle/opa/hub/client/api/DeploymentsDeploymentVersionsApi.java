/*
 * Hub Administration
 * This version of the API allows management of OPA Hub users, deployments, and version information.
 *
 * OpenAPI spec version: 12.2.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package oracle.opa.hub.client.api;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import oracle.opa.hub.client.ApiCallback;
import oracle.opa.hub.client.ApiClient;
import oracle.opa.hub.client.ApiException;
import oracle.opa.hub.client.ApiResponse;
import oracle.opa.hub.client.Configuration;
import oracle.opa.hub.client.Pair;
import oracle.opa.hub.client.ProgressRequestBody;
import oracle.opa.hub.client.ProgressResponseBody;
import oracle.opa.hub.client.model.DeploymentVersion;
import oracle.opa.hub.client.model.DeploymentVersions;
import oracle.opa.hub.client.model.Snapshot;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeploymentsDeploymentVersionsApi {
    private ApiClient apiClient;

    public DeploymentsDeploymentVersionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeploymentsDeploymentVersionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteDeploymentVersion
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDeploymentVersionCall(String deploymentVersionVersionNo, String deploymentName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment-name}/versions/{deployment-version-versionNo}"
            .replaceAll("\\{" + "deployment-version-versionNo" + "\\}", apiClient.escapeString(deploymentVersionVersionNo.toString()))
            .replaceAll("\\{" + "deployment-name" + "\\}", apiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "opa_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDeploymentVersionValidateBeforeCall(String deploymentVersionVersionNo, String deploymentName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentVersionVersionNo' is set
        if (deploymentVersionVersionNo == null) {
            throw new ApiException("Missing the required parameter 'deploymentVersionVersionNo' when calling deleteDeploymentVersion(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling deleteDeploymentVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteDeploymentVersionCall(deploymentVersionVersionNo, deploymentName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a deployment version
     * This operation will delete a deployment version
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDeploymentVersion(String deploymentVersionVersionNo, String deploymentName) throws ApiException {
        deleteDeploymentVersionWithHttpInfo(deploymentVersionVersionNo, deploymentName);
    }

    /**
     * Delete a deployment version
     * This operation will delete a deployment version
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDeploymentVersionWithHttpInfo(String deploymentVersionVersionNo, String deploymentName) throws ApiException {
        com.squareup.okhttp.Call call = deleteDeploymentVersionValidateBeforeCall(deploymentVersionVersionNo, deploymentName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a deployment version (asynchronously)
     * This operation will delete a deployment version
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDeploymentVersionAsync(String deploymentVersionVersionNo, String deploymentName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDeploymentVersionValidateBeforeCall(deploymentVersionVersionNo, deploymentName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDeploymentVersion
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentVersionCall(String deploymentVersionVersionNo, String deploymentName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment-name}/versions/{deployment-version-versionNo}"
            .replaceAll("\\{" + "deployment-version-versionNo" + "\\}", apiClient.escapeString(deploymentVersionVersionNo.toString()))
            .replaceAll("\\{" + "deployment-name" + "\\}", apiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "opa_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentVersionValidateBeforeCall(String deploymentVersionVersionNo, String deploymentName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentVersionVersionNo' is set
        if (deploymentVersionVersionNo == null) {
            throw new ApiException("Missing the required parameter 'deploymentVersionVersionNo' when calling getDeploymentVersion(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling getDeploymentVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDeploymentVersionCall(deploymentVersionVersionNo, deploymentName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a deployment version
     * This operation will get a deployment version. The deployment version id is an integer, or the aliases \&quot;latest\&quot; or \&quot;active\&quot;.
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @return DeploymentVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentVersion getDeploymentVersion(String deploymentVersionVersionNo, String deploymentName) throws ApiException {
        ApiResponse<DeploymentVersion> resp = getDeploymentVersionWithHttpInfo(deploymentVersionVersionNo, deploymentName);
        return resp.getData();
    }

    /**
     * Get a deployment version
     * This operation will get a deployment version. The deployment version id is an integer, or the aliases \&quot;latest\&quot; or \&quot;active\&quot;.
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @return ApiResponse&lt;DeploymentVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentVersion> getDeploymentVersionWithHttpInfo(String deploymentVersionVersionNo, String deploymentName) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentVersionValidateBeforeCall(deploymentVersionVersionNo, deploymentName, null, null);
        Type localVarReturnType = new TypeToken<DeploymentVersion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a deployment version (asynchronously)
     * This operation will get a deployment version. The deployment version id is an integer, or the aliases \&quot;latest\&quot; or \&quot;active\&quot;.
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentVersionAsync(String deploymentVersionVersionNo, String deploymentName, final ApiCallback<DeploymentVersion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentVersionValidateBeforeCall(deploymentVersionVersionNo, deploymentName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentVersion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeploymentVersions
     * @param deploymentName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentVersionsCall(String deploymentName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment-name}/versions"
            .replaceAll("\\{" + "deployment-name" + "\\}", apiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "opa_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentVersionsValidateBeforeCall(String deploymentName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling getDeploymentVersions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDeploymentVersionsCall(deploymentName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get one or more deployment versions
     * This operation will get one or more deployment versions
     * @param deploymentName  (required)
     * @return DeploymentVersions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentVersions getDeploymentVersions(String deploymentName) throws ApiException {
        ApiResponse<DeploymentVersions> resp = getDeploymentVersionsWithHttpInfo(deploymentName);
        return resp.getData();
    }

    /**
     * Get one or more deployment versions
     * This operation will get one or more deployment versions
     * @param deploymentName  (required)
     * @return ApiResponse&lt;DeploymentVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentVersions> getDeploymentVersionsWithHttpInfo(String deploymentName) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentVersionsValidateBeforeCall(deploymentName, null, null);
        Type localVarReturnType = new TypeToken<DeploymentVersions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get one or more deployment versions (asynchronously)
     * This operation will get one or more deployment versions
     * @param deploymentName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentVersionsAsync(String deploymentName, final ApiCallback<DeploymentVersions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentVersionsValidateBeforeCall(deploymentName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentVersions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSnapshot
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSnapshotCall(String deploymentVersionVersionNo, String deploymentName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment-name}/versions/{deployment-version-versionNo}/snapshot"
            .replaceAll("\\{" + "deployment-version-versionNo" + "\\}", apiClient.escapeString(deploymentVersionVersionNo.toString()))
            .replaceAll("\\{" + "deployment-name" + "\\}", apiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "opa_auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSnapshotValidateBeforeCall(String deploymentVersionVersionNo, String deploymentName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentVersionVersionNo' is set
        if (deploymentVersionVersionNo == null) {
            throw new ApiException("Missing the required parameter 'deploymentVersionVersionNo' when calling getSnapshot(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling getSnapshot(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSnapshotCall(deploymentVersionVersionNo, deploymentName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a snapshot
     * This operation will get a deployment snapshot as a base-64 encoded string. To receive a deployment snapshot as binary data, send an HTTP Accept header of \&quot;Accept: application/zip\&quot;.
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @return Snapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Snapshot getSnapshot(String deploymentVersionVersionNo, String deploymentName) throws ApiException {
        ApiResponse<Snapshot> resp = getSnapshotWithHttpInfo(deploymentVersionVersionNo, deploymentName);
        return resp.getData();
    }

    /**
     * Get a snapshot
     * This operation will get a deployment snapshot as a base-64 encoded string. To receive a deployment snapshot as binary data, send an HTTP Accept header of \&quot;Accept: application/zip\&quot;.
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @return ApiResponse&lt;Snapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Snapshot> getSnapshotWithHttpInfo(String deploymentVersionVersionNo, String deploymentName) throws ApiException {
        com.squareup.okhttp.Call call = getSnapshotValidateBeforeCall(deploymentVersionVersionNo, deploymentName, null, null);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a snapshot (asynchronously)
     * This operation will get a deployment snapshot as a base-64 encoded string. To receive a deployment snapshot as binary data, send an HTTP Accept header of \&quot;Accept: application/zip\&quot;.
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSnapshotAsync(String deploymentVersionVersionNo, String deploymentName, final ApiCallback<Snapshot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSnapshotValidateBeforeCall(deploymentVersionVersionNo, deploymentName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for insertDeploymentVersions
     * @param deploymentName  (required)
     * @param body deployment-versions to insert (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call insertDeploymentVersionsCall(String deploymentName, DeploymentVersions body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment-name}/versions"
            .replaceAll("\\{" + "deployment-name" + "\\}", apiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "opa_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call insertDeploymentVersionsValidateBeforeCall(String deploymentName, DeploymentVersions body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling insertDeploymentVersions(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling insertDeploymentVersions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = insertDeploymentVersionsCall(deploymentName, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Insert one or more deployment versions
     * This operation will insert one or more deployment versions
     * @param deploymentName  (required)
     * @param body deployment-versions to insert (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void insertDeploymentVersions(String deploymentName, DeploymentVersions body) throws ApiException {
        insertDeploymentVersionsWithHttpInfo(deploymentName, body);
    }

    /**
     * Insert one or more deployment versions
     * This operation will insert one or more deployment versions
     * @param deploymentName  (required)
     * @param body deployment-versions to insert (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> insertDeploymentVersionsWithHttpInfo(String deploymentName, DeploymentVersions body) throws ApiException {
        com.squareup.okhttp.Call call = insertDeploymentVersionsValidateBeforeCall(deploymentName, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Insert one or more deployment versions (asynchronously)
     * This operation will insert one or more deployment versions
     * @param deploymentName  (required)
     * @param body deployment-versions to insert (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertDeploymentVersionsAsync(String deploymentName, DeploymentVersions body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertDeploymentVersionsValidateBeforeCall(deploymentName, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateDeploymentVersion
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param body deployment-version to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDeploymentVersionCall(String deploymentVersionVersionNo, String deploymentName, DeploymentVersion body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/deployments/{deployment-name}/versions/{deployment-version-versionNo}"
            .replaceAll("\\{" + "deployment-version-versionNo" + "\\}", apiClient.escapeString(deploymentVersionVersionNo.toString()))
            .replaceAll("\\{" + "deployment-name" + "\\}", apiClient.escapeString(deploymentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "opa_auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDeploymentVersionValidateBeforeCall(String deploymentVersionVersionNo, String deploymentName, DeploymentVersion body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deploymentVersionVersionNo' is set
        if (deploymentVersionVersionNo == null) {
            throw new ApiException("Missing the required parameter 'deploymentVersionVersionNo' when calling updateDeploymentVersion(Async)");
        }
        
        // verify the required parameter 'deploymentName' is set
        if (deploymentName == null) {
            throw new ApiException("Missing the required parameter 'deploymentName' when calling updateDeploymentVersion(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDeploymentVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateDeploymentVersionCall(deploymentVersionVersionNo, deploymentName, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a deployment version
     * This operation will update a deployment version
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param body deployment-version to update (required)
     * @return DeploymentVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeploymentVersion updateDeploymentVersion(String deploymentVersionVersionNo, String deploymentName, DeploymentVersion body) throws ApiException {
        ApiResponse<DeploymentVersion> resp = updateDeploymentVersionWithHttpInfo(deploymentVersionVersionNo, deploymentName, body);
        return resp.getData();
    }

    /**
     * Update a deployment version
     * This operation will update a deployment version
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param body deployment-version to update (required)
     * @return ApiResponse&lt;DeploymentVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeploymentVersion> updateDeploymentVersionWithHttpInfo(String deploymentVersionVersionNo, String deploymentName, DeploymentVersion body) throws ApiException {
        com.squareup.okhttp.Call call = updateDeploymentVersionValidateBeforeCall(deploymentVersionVersionNo, deploymentName, body, null, null);
        Type localVarReturnType = new TypeToken<DeploymentVersion>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a deployment version (asynchronously)
     * This operation will update a deployment version
     * @param deploymentVersionVersionNo  (required)
     * @param deploymentName  (required)
     * @param body deployment-version to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeploymentVersionAsync(String deploymentVersionVersionNo, String deploymentName, DeploymentVersion body, final ApiCallback<DeploymentVersion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeploymentVersionValidateBeforeCall(deploymentVersionVersionNo, deploymentName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeploymentVersion>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
